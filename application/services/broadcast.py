import asyncio
import logging
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

from api.dto import PendingBroadcastDTO
from api.exceptions import ApiBadRequestError, ApiClientError, ResourceNotFoundError
from api.gateways.broadcast_gateway import BroadcastGateway
from config import settings

logger = logging.getLogger(__name__)

class BroadcastService:
    def __init__(self, gateway: BroadcastGateway):
        self._gateway = gateway

    async def create_broadcast(self, message_text: str, scheduled_at: str | None = None) -> str:
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É —á–µ—Ä–µ–∑ API —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞."""
        try:
            await self._gateway.create_broadcast(
                message_text=message_text,
                admin_api_key=settings.admin_api_key,
                scheduled_at=scheduled_at
            )
            
            if scheduled_at:
                return f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {scheduled_at} (UTC)!"
            else:
                return "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –Ω–µ–≥–∞–π–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!"

        except ApiBadRequestError as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e.message}"
        except ApiClientError as e:
            if e.status_code == 401:
                return "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø—É –¥–æ API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
            return f"‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API ({e.status_code}) –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏."

    async def send_pending_broadcast(self, bot: Bot) -> str:
        """
        –û—Ç—Ä–∏–º—É—î –æ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –∑ API, –≤–∏–∫–æ–Ω—É—î –π–æ–≥–æ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–≤—ñ—Ç.
        """
        try:
            pending_data = await self._gateway.get_pending_broadcast(admin_api_key=settings.admin_api_key)
            if not pending_data:
                return "‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."
                
            broadcast = PendingBroadcastDTO.model_validate(pending_data)
            
        except ResourceNotFoundError:
            return "‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."
        except ApiClientError as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É: {e.message}"

        success_count = 0
        failure_count = 0

        for user in broadcast.users:
            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=broadcast.message_text,
                    parse_mode="HTML"
                )
                success_count += 1
            except TelegramBadRequest as e:
                logger.warning("Failed to send broadcast to user %d: %s", user.telegram_id, e)
                failure_count += 1
            except Exception:
                logger.exception("Unexpected error sending to user %d", user.telegram_id)
                failure_count += 1
            
            await asyncio.sleep(0.1)

        try:
            await self._gateway.mark_broadcast_as_sent(
                broadcast_id=broadcast.id,
                admin_api_key=settings.admin_api_key
            )
            logger.info("Broadcast #%d marked as sent.", broadcast.id)
        except ApiClientError as e:
            logger.error("CRITICAL: Failed to mark broadcast #%d as sent: %s", broadcast.id, e)
            return "üî¥ –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: —Ä–æ–∑—Å–∏–ª–∫—É –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —ó—ó —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É. –ú–æ–∂–ª–∏–≤—ñ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!"

        return (
            f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            f"üü¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {success_count}\n"
            f"üî¥ –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {failure_count}"
        )