import time
from typing import List, Dict, Tuple
from api import ApiGroupedSubjectDTO, ApiGroupedSubjectDetailsDTO, ResourceNotFoundError
from api.gateways.subject_gateway import SubjectGateway
from .teacher import TeacherService

CACHE_TTL_SECONDS = 3600  # 1 –≥–æ–¥–∏–Ω–∞

class SubjectService:
    def __init__(self, gateway: SubjectGateway, teacher_service: TeacherService): # <--- –û–Ω–æ–≤–ª—é—î–º–æ __init__
        self._gateway = gateway
        self._teacher_service = teacher_service
        self._subjects_list_cache: Tuple[List[ApiGroupedSubjectDTO], float] | None = None
        self._subject_details_cache: Dict[str, Tuple[ApiGroupedSubjectDetailsDTO, float]] = {}

    async def get_all_subjects(self) -> List[ApiGroupedSubjectDTO]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–µ—à –∑ TTL."""
        if self._subjects_list_cache is not None:
            data, timestamp = self._subjects_list_cache
            if time.time() - timestamp < CACHE_TTL_SECONDS:
                return data 

        response_data = await self._gateway.get_all_subjects()
        if not response_data:
            return []
        
        subjects = [ApiGroupedSubjectDTO.model_validate(subject) for subject in response_data]
        
        self._subjects_list_cache = (subjects, time.time())
        return subjects

    async def get_grouped_subject_details(self, abbreviation: str) -> ApiGroupedSubjectDetailsDTO | None:
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–µ—à –∑ TTL."""
        if abbreviation in self._subject_details_cache:
            data, timestamp = self._subject_details_cache[abbreviation]
            if time.time() - timestamp < CACHE_TTL_SECONDS:
                return data

        try:
            response_data = await self._gateway.get_grouped_subject_details_by_abbreviation(abbreviation)
            details = ApiGroupedSubjectDetailsDTO.model_validate(response_data)
            
            self._subject_details_cache[abbreviation] = (details, time.time())
            return details
        except ResourceNotFoundError:
            return None

    def format_subject_details(self, subject: ApiGroupedSubjectDetailsDTO) -> str:
        header = f"üìö <b>{subject.name} ({subject.abbreviation})</b>\n"
        parts = [header]

        if not subject.variants:
            parts.append("<i>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è.</i>")
            return "\n".join(parts)

        for variant in subject.variants:
            parts.append(f"<b>‚îÅ‚îÅ‚îÅ {variant.subject_type.name} ‚îÅ‚îÅ‚îÅ</b>")
            
            if variant.infos:
                info_parts = []
                for info in variant.infos:
                    if info.value and info.value.strip().lower().startswith("http"):
                        link = f"‚ñ´Ô∏è <a href='{info.value.strip()}'><b>{info.info_type_name}</b></a>"
                        info_parts.append(link)
                    else:
                        info_parts.append(f"‚ñ´Ô∏è <b>{info.info_type_name}:</b> {info.value}")
                parts.append("\n".join(info_parts))
            
            if not variant.teachers:
                parts.append("üë®‚Äçüè´ <i>–í–∏–∫–ª–∞–¥–∞—á—ñ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ.</i>")
            else:
                teacher_lines = []
                for teacher in variant.teachers:
                    teacher_lines.append(f"‚Ä¢ {teacher.full_name}")
                    
                    _, other_infos = self._teacher_service.extract_photo_and_infos(teacher)
                    
                    if other_infos:
                        for info in other_infos:
                            if info.value and info.value.strip().lower().startswith("http"):
                                link = f"    ‚îî <a href='{info.value.strip()}'><b>{info.info_type_name}</b></a>"
                                teacher_lines.append(link)
                            else:
                                teacher_lines.append(f"    ‚îî <b>{info.info_type_name}:</b> {info.value}")
                            
                parts.append(f"<b>–í–∏–∫–ª–∞–¥–∞—á—ñ:</b>\n" + "\n".join(teacher_lines))
            
            parts.append("")

        return "\n".join(parts)