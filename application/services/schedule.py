from datetime import date, time
from api import DailyScheduleDTO
from api.gateways import UserGateway
from .user import UserService

MONTHS_UA = {
    1: "–°—ñ—á–Ω—è", 2: "–õ—é—Ç–æ–≥–æ", 3: "–ë–µ—Ä–µ–∑–Ω—è", 4: "–ö–≤—ñ—Ç–Ω—è",
    5: "–¢—Ä–∞–≤–Ω—è", 6: "–ß–µ—Ä–≤–Ω—è", 7: "–õ–∏–ø–Ω—è", 8: "–°–µ—Ä–ø–Ω—è",
    9: "–í–µ—Ä–µ—Å–Ω—è", 10: "–ñ–æ–≤—Ç–Ω—è", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–ì—Ä—É–¥–Ω—è"
}

def get_seasonal_emoji(current_date: date) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ä–∏ —Ä–æ–∫—É."""
    month = current_date.month
    if month in [12, 1, 2]:
        return "‚ùÑÔ∏è"  # –ó–∏–º–∞
    elif month in [3, 4, 5]:
        return "üå∑"  # –í–µ—Å–Ω–∞
    elif month in [6, 7, 8]:
        return "‚òÄÔ∏è"  # –õ—ñ—Ç–æ
    else:  # 9, 10, 11
        return "üçÅ"  # –û—Å—ñ–Ω—å


class ScheduleService:
    def __init__(self, user_gateway: UserGateway, user_service: UserService):
        self._user_gateway = user_gateway
        self._user_service = user_service

    async def get_schedule_for_day(self, telegram_id: int, schedule_date: date) -> DailyScheduleDTO:
        """–û—Ç—Ä–∏–º—É—î —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–π –¥–µ–Ω—å."""
        user = await self._user_service.get_user_by_telegram_id(telegram_id)
        if not user:
            raise ValueError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å: /start")
        
        date_str = schedule_date.isoformat()
        schedule_data = await self._user_gateway.get_schedule_for_user(user.id, date_str)
        
        return DailyScheduleDTO.model_validate(schedule_data)

    def format_schedule_message(self, schedule: DailyScheduleDTO) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –æ–±'—î–∫—Ç —Ä–æ–∑–∫–ª–∞–¥—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        schedule_date = date.fromisoformat(schedule.date)
        
        seasonal_emoji = get_seasonal_emoji(schedule_date)
        
        day = schedule_date.day
        month_name = MONTHS_UA.get(schedule_date.month, "")

        week_type_full = "–ø–∞—Ä–Ω–∏–π" if schedule.is_even_week else "–Ω–µ–ø–∞—Ä–Ω–∏–π"

        header_line1 = f"{seasonal_emoji} {schedule.day_of_week_name.capitalize()} {day:02} {month_name}"
        header_line2 = f"–¢–∏–∂–¥–µ–Ω—å {schedule.week_number} ({week_type_full})"
        
        parts = [header_line1, header_line2]
        
        if schedule.override_info:
            parts.append(f"‚ùóÔ∏è <b>–ó–∞–º—ñ–Ω–∞:</b> {schedule.override_info.substituted_day_name}")
            if schedule.override_info.description:
                parts.append(f"<i>{schedule.override_info.description}</i>")

        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

        if not schedule.lessons:
            parts.append("üéâ –ü–∞—Ä –Ω–µ–º–∞—î, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏!")
        else:
            for lesson in sorted(schedule.lessons, key=lambda l: l.pair_number):
                start_time = time.fromisoformat(lesson.pair_start_time).strftime('%-H:%M')
                end_time = time.fromisoformat(lesson.pair_end_time).strftime('%-H:%M')
                
                lesson_name = lesson.subject_name
                if lesson.lesson_url:
                    lesson_name = f"<a href='{lesson.lesson_url}'>{lesson_name}</a>"

                teacher_name = lesson.teacher_full_name
                lesson_line = (
                    f"{lesson.pair_number}. {lesson_name} "
                    f"({lesson.subject_type_abbreviation}) "
                    f"({start_time}-{end_time})"
                    f"\nüë§ {teacher_name}"
                )
                parts.append(lesson_line)

        return "\n".join(parts)