from datetime import date, time
from api import DailyScheduleDTO

from api.gateways import ScheduleGateway

from .user import UserService
from .region import RegionService

MONTHS_UA = {
    1: "–°—ñ—á–Ω—è", 2: "–õ—é—Ç–æ–≥–æ", 3: "–ë–µ—Ä–µ–∑–Ω—è", 4: "–ö–≤—ñ—Ç–Ω—è",
    5: "–¢—Ä–∞–≤–Ω—è", 6: "–ß–µ—Ä–≤–Ω—è", 7: "–õ–∏–ø–Ω—è", 8: "–°–µ—Ä–ø–Ω—è",
    9: "–í–µ—Ä–µ—Å–Ω—è", 10: "–ñ–æ–≤—Ç–Ω—è", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–ì—Ä—É–¥–Ω—è"
}

def get_seasonal_emoji(current_date: date) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ä–∏ —Ä–æ–∫—É."""
    month = current_date.month
    if month in [12, 1, 2]:
        return "‚ùÑÔ∏è"  # –ó–∏–º–∞
    elif month in [3, 4, 5]:
        return "üå∑"  # –í–µ—Å–Ω–∞
    elif month in [6, 7, 8]:
        return "‚òÄÔ∏è"  # –õ—ñ—Ç–æ
    else:  # 9, 10, 11
        return "üçÅ"  # –û—Å—ñ–Ω—å


class ScheduleService:
    def __init__(
        self,
        schedule_gateway: ScheduleGateway,
        user_service: UserService,
        region_service: RegionService
    ):
        self._schedule_gateway = schedule_gateway
        self._user_service = user_service
        self._region_service = region_service

    async def get_schedule_for_day(self, telegram_id: int, schedule_date: date) -> DailyScheduleDTO:
        """–û—Ç—Ä–∏–º—É—î —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–π –¥–µ–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç."""
        user = await self._user_service.get_user_by_telegram_id(telegram_id)
        if not user:
            raise ValueError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å: /start")
        
        regions = await self._region_service.get_all_regions()
        user_region = next((r for r in regions if r.id == user.region_id), None)
        
        if not user_region:
            raise ValueError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä–µ–≥—ñ–æ–Ω –∑ ID={user.region_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

        time_zone_id = await self._region_service.get_timezone_by_id(user.region_id)
        if not time_zone_id:
            raise ValueError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É –∑ ID={user.region_id}.")
                
        date_str = schedule_date.isoformat()
        
        schedule_data = await self._schedule_gateway.get_daily_schedule_for_group(
            group_id=user.group_id,
            time_zone_id=user_region.time_zone_id,
            date=date_str
        )
        
        return DailyScheduleDTO.model_validate(schedule_data)

    def format_schedule_message(self, schedule: DailyScheduleDTO) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –æ–±'—î–∫—Ç —Ä–æ–∑–∫–ª–∞–¥—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º "–≤—ñ–∫–æ–Ω"."""
        schedule_date = date.fromisoformat(schedule.date)
        
        seasonal_emoji = get_seasonal_emoji(schedule_date)
        day = schedule_date.day
        month_name = MONTHS_UA.get(schedule_date.month, "")
        week_type = "–ø–∞—Ä–Ω–∏–π" if schedule.is_even_week else "–Ω–µ–ø–∞—Ä–Ω–∏–π"
        
        header1 = f"{seasonal_emoji} {schedule.day_of_week_name.capitalize()}. {day:02} {month_name}"
        header2 = f"{schedule.group_name} –¢–∏–∂–¥–µ–Ω—å {schedule.week_number} ({week_type})"
        parts = [header1, header2]
        
        if schedule.override_info:
            parts.append(f"‚ùóÔ∏è <b>–ó–∞–º—ñ–Ω–∞:</b> {schedule.override_info.substituted_day_name}")
            if schedule.override_info.description:
                parts.append(f"<i>{schedule.override_info.description}</i>")

        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

        if not schedule.lessons:
            parts.append("üéâ –ü–∞—Ä –Ω–µ–º–∞—î, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏!")
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞—Ä–∏ –∑–∞ —ó—ó –Ω–æ–º–µ—Ä–æ–º
            lessons_by_number = {lesson.pair_number: lesson for lesson in schedule.lessons}
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –ø–∞—Ä–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å
            max_pair = max(lessons_by_number.keys())

            # –Ü—Ç–µ—Ä—É—î–º–æ –≤—ñ–¥ 1-—ó –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–∞—Ä–∏, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ "–≤—ñ–∫–Ω–∞"
            for pair_num in range(1, max_pair + 1):
                lesson = lessons_by_number.get(pair_num)
                
                if lesson:
                    # –Ø–∫—â–æ –ø–∞—Ä–∞ —ñ—Å–Ω—É—î, —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —ó—ó
                    start_time = time.fromisoformat(lesson.pair_start_time).strftime('%-H:%M')
                    end_time = time.fromisoformat(lesson.pair_end_time).strftime('%-H:%M')
                    
                    lesson_name = lesson.subject_name
                    if lesson.lesson_url:
                        lesson_name = f"<a href='{lesson.lesson_url}'>{lesson_name}</a>"

                    lesson_line = (
                        f"{lesson.pair_number}. {lesson_name} "
                        f"({lesson.subject_type_abbreviation}) "
                        f"({start_time}-{end_time}) "
                        f"{lesson.teacher_full_name}"
                    )
                    parts.append(lesson_line)
                else:
                    # –Ø–∫—â–æ –ø–∞—Ä–∏ –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ "–≤—ñ–∫–Ω–æ"
                    parts.append(f"{pair_num}. üò¥ –í—ñ–∫–Ω–æ")

        return "\n".join(parts)