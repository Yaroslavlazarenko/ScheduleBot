from typing import List
from datetime import date

from aiogram.filters.callback_data import CallbackData
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, 
                           KeyboardButton, ReplyKeyboardMarkup)

from api import ApiGroupDTO, ApiRegionDTO, ApiTeacherDTO, ApiGroupedSubjectDTO

class GroupCallbackFactory(CallbackData, prefix="group"):
    id: int
    name: str

class RegionCallbackFactory(CallbackData, prefix="region"):
    id: int

class ScheduleCallbackFactory(CallbackData, prefix="schedule"):
    action: str
    current_date: str
    original_user_id: int 

class TeacherCallbackFactory(CallbackData, prefix="teacher"):
    action: str
    id: int | None = None 

class SettingsCallbackFactory(CallbackData, prefix="settings"):
    action: str

class SubjectCallbackFactory(CallbackData, prefix="subject"):
    action: str
    subject_name_id: int | None = None

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥—ñ—è–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üóì –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"), 
                KeyboardButton(text="üë®‚Äçüè´ –í—á–∏—Ç–µ–ª—ñ")
            ],
            [
                KeyboardButton(text="üìö –ü—Ä–µ–¥–º–µ—Ç–∏"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_settings_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    buttons = [
        [
            InlineKeyboardButton(
                text="–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É",
                callback_data=SettingsCallbackFactory(action="change_group").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å",
                callback_data=SettingsCallbackFactory(action="change_region").pack()
            )
        ],
        [
             InlineKeyboardButton(
                text="–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå",
                callback_data=SettingsCallbackFactory(action="close").pack()
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_schedule_navigation_keyboard(
    current_date: date, 
    original_user_id: int,
    semester_start: date | None = None,
    semester_end: date | None = None
) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –¥–Ω—è—Ö —Ä–æ–∑–∫–ª–∞–¥—É, –ø—Ä–∏—Ö–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–µ–∂–∞—Ö —Å–µ–º–µ—Å—Ç—Ä—É."""
    date_str = current_date.isoformat()
    
    navigation_buttons = []

    if semester_start is None or current_date > semester_start:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=ScheduleCallbackFactory(
                    action="prev", 
                    current_date=date_str, 
                    original_user_id=original_user_id
                ).pack()
            )
        )

    if semester_end is None or current_date < semester_end:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=ScheduleCallbackFactory(
                    action="next", 
                    current_date=date_str, 
                    original_user_id=original_user_id
                ).pack()
            )
        )
    
    close_button = InlineKeyboardButton(
        text="–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå",
        callback_data=ScheduleCallbackFactory(
            action="close",
            current_date=date_str,
            original_user_id=original_user_id
        ).pack()
    )
    
    keyboard = []
    if navigation_buttons:
        keyboard.append(navigation_buttons)
    keyboard.append([close_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_show_schedule_keyboard(original_user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–æ–∫–∞–∑—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."""
    button = InlineKeyboardButton(
        text="üóì –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥",
        callback_data=ScheduleCallbackFactory(
            action="show", 
            current_date=date.today().isoformat(),
            original_user_id=original_user_id
        ).pack()
    )
    return InlineKeyboardMarkup(inline_keyboard=[[button]])

def create_groups_keyboard(groups: List[ApiGroupDTO], columns: int = 2, add_back_button: bool = False) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø —É –≤–∏–≥–ª—è–¥—ñ —Å—ñ—Ç–∫–∏.
    :param groups: –°–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ –≥—Ä—É–ø.
    :param columns: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ —É —Å—ñ—Ç—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2).
    :param add_back_button: –î–æ–¥–∞—î –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    buttons = []
    row = []
    for group in groups:
        btn = InlineKeyboardButton(
            text=group.name,
            callback_data=GroupCallbackFactory(id=group.id, name=group.name).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)

    if add_back_button:
        back_button = InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=SettingsCallbackFactory(action="back_to_menu").pack()
        )
        buttons.append([back_button])
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_regions_keyboard(regions: List[ApiRegionDTO], columns: int = 1, add_back_button: bool = False) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥—ñ–æ–Ω—ñ–≤.
    :param add_back_button: –î–æ–¥–∞—î –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    buttons = []
    row = []
    for region in regions:
        btn = InlineKeyboardButton(
            text=region.name,
            callback_data=RegionCallbackFactory(id=region.id).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)

    if add_back_button:
        back_button = InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=SettingsCallbackFactory(action="back_to_menu").pack()
        )
        buttons.append([back_button])
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_teachers_keyboard(teachers: List[ApiTeacherDTO], columns: int = 2) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤."""
    buttons = []
    row = []
    for teacher in sorted(teachers, key=lambda t: t.last_name):
        parts = [teacher.last_name]
        if teacher.first_name:
            parts.append(f"{teacher.first_name[0].upper()}.")
        if teacher.middle_name:
            parts.append(f"{teacher.middle_name[0].upper()}.")
        
        abbreviated_name = " ".join(parts)
        
        btn = InlineKeyboardButton(
            text=abbreviated_name,
            callback_data=TeacherCallbackFactory(action="select", id=teacher.id).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)

    close_button = InlineKeyboardButton(
        text="–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå",
        callback_data=TeacherCallbackFactory(action="close").pack()
    )
    buttons.append([close_button])
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_teacher_details_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤."""
    button = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=TeacherCallbackFactory(action="back").pack()
    )
    return InlineKeyboardMarkup(inline_keyboard=[[button]])

def create_subjects_keyboard(subjects: List[ApiGroupedSubjectDTO], columns: int = 2) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    buttons = []
    row = []
    for subject in sorted(subjects, key=lambda s: s.name):
        btn = InlineKeyboardButton(
            text=subject.abbreviation,
            callback_data=SubjectCallbackFactory(action="select", subject_name_id=subject.subject_name_id).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)

    close_button = InlineKeyboardButton(
        text="–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå",
        callback_data=SubjectCallbackFactory(action="close").pack()
    )
    buttons.append([close_button])
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_subject_details_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥" –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    button = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=SubjectCallbackFactory(action="back").pack()
    )
    return InlineKeyboardMarkup(inline_keyboard=[[button]])