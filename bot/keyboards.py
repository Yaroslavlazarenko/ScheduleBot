from typing import List
from datetime import date

from aiogram.filters.callback_data import CallbackData
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, 
                           KeyboardButton, ReplyKeyboardMarkup)

from api import ApiGroupDTO, ApiRegionDTO

class GroupCallbackFactory(CallbackData, prefix="group"):
    id: int
    name: str

class RegionCallbackFactory(CallbackData, prefix="region"):
    id: int

class ScheduleCallbackFactory(CallbackData, prefix="schedule"):
    action: str
    current_date: str

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥—ñ—è–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóì –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_schedule_navigation_keyboard(current_date: date) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –¥–Ω—è—Ö —Ä–æ–∑–∫–ª–∞–¥—É."""
    date_str = current_date.isoformat()
    buttons = [
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=ScheduleCallbackFactory(action="prev", current_date=date_str).pack()
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=ScheduleCallbackFactory(action="next", current_date=date_str).pack()
        )
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

def create_groups_keyboard(groups: List[ApiGroupDTO], columns: int = 2) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø —É –≤–∏–≥–ª—è–¥—ñ —Å—ñ—Ç–∫–∏.
    :param groups: –°–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ –≥—Ä—É–ø.
    :param columns: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ —É —Å—ñ—Ç—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2).
    """
    buttons = []
    row = []
    for group in groups:
        btn = InlineKeyboardButton(
            text=group.name,
            callback_data=GroupCallbackFactory(id=group.id, name=group.name).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_regions_keyboard(regions: List[ApiRegionDTO], columns: int = 1) -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥—ñ–æ–Ω—ñ–≤.
    """
    buttons = []
    row = []
    for region in regions:
        btn = InlineKeyboardButton(
            text=region.name,
            callback_data=RegionCallbackFactory(id=region.id).pack()
        )
        row.append(btn)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
            
    if row:
        buttons.append(row)
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)