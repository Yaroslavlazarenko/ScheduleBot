import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery 

from application.services.teacher import TeacherService
from bot.keyboards import create_teachers_keyboard, TeacherCallbackFactory, create_teacher_details_keyboard

logger = logging.getLogger(__name__)
teacher_router = Router(name="teacher_router")

@teacher_router.message(F.text == "üë®‚Äçüè´ –í—á–∏—Ç–µ–ª—ñ")
async def handle_get_teachers_list(message: Message, teacher_service: TeacherService):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —ñ –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    teachers = await teacher_service.get_all_teachers()
    
    if not teachers:
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    keyboard = create_teachers_keyboard(teachers)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:", reply_markup=keyboard)

    try:
        await message.delete()
    except TelegramBadRequest as e:
        logger.warning("Could not delete user message: %s", e)

@teacher_router.callback_query(TeacherCallbackFactory.filter(F.action == "back"))
async def handle_back_to_teachers_list(
    query: CallbackQuery,
    teacher_service: TeacherService
):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤."""
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.", show_alert=True)
        return

    teachers = await teacher_service.get_all_teachers()
    keyboard = create_teachers_keyboard(teachers)
    text = "–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:"

    await query.message.answer(text=text, reply_markup=keyboard)

    try:
        await query.message.delete()
    except TelegramBadRequest as e:
        logger.warning("Could not delete message on 'back' action: %s", e)
    finally:
        await query.answer()

@teacher_router.callback_query(TeacherCallbackFactory.filter(F.action == "select"))
async def handle_teacher_selection(
    query: CallbackQuery,
    callback_data: TeacherCallbackFactory,
    teacher_service: TeacherService
):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –ø–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ."""
    
    if callback_data.id is None:
        await query.answer("–ü–æ–º–∏–ª–∫–∞: ID –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        logger.warning("Teacher selection callback received without a teacher ID.")
        return
    
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.", show_alert=True)
        return
        
    teacher = await teacher_service.get_teacher_by_id(callback_data.id)

    if not teacher:
        await query.message.edit_text("‚ùå –í–∏–∫–ª–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        await query.answer()
        return

    photo_url, other_infos = teacher_service.extract_photo_and_infos(teacher)

    caption_text = teacher_service.format_teacher_details(teacher, other_infos)

    keyboard = create_teacher_details_keyboard()
    
    try:
        if photo_url:
            await query.message.answer_photo(
                photo=photo_url,
                caption=caption_text,
                reply_markup=keyboard
            )
            await query.message.delete()
        else:
            await query.message.edit_text(caption_text, reply_markup=keyboard)

    except TelegramBadRequest as e:
        logger.error("Failed to send teacher info for teacher %d: %s", teacher.id, e)
        await query.message.edit_text(
            f"{caption_text}\n\n<i>(–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ)</i>",
            reply_markup=keyboard
        )
    finally:
        await query.answer()

@teacher_router.callback_query(TeacherCallbackFactory.filter(F.action == "close"))
async def handle_close_teachers_list(query: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —É —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —ñ –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.", show_alert=True)
        return
    
    try:
        await query.message.delete()
    except TelegramBadRequest:
        await query.message.edit_reply_markup(reply_markup=None)
    finally:
        await query.answer()