import logging
from datetime import datetime, timezone

from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import BaseFilter
from aiogram.exceptions import TelegramBadRequest

from application.services import UserService, BroadcastService
from bot.fsm import BroadcastFSM
from bot.keyboards import (create_admin_panel_keyboard, create_broadcast_confirmation_keyboard,
                           create_cancel_fsm_keyboard, create_broadcast_type_keyboard)
from bot.keyboards import BroadcastCallbackFactory

logger = logging.getLogger(__name__)
admin_router = Router(name="admin_router")

class AdminFilter(BaseFilter):
    async def __call__(self, event: types.Message | types.CallbackQuery, user_service: UserService) -> bool:
        if not event.from_user:
            return False
        user = await user_service.get_user_by_telegram_id(event.from_user.id)
        return user is not None and user.is_admin

@admin_router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", AdminFilter())
async def handle_admin_panel(message: Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!", reply_markup=create_admin_panel_keyboard())
    await message.delete()

@admin_router.callback_query(F.data == "close_admin_panel", AdminFilter())
async def handle_close_admin_panel(query: CallbackQuery):
    if isinstance(query.message, Message):
        try:
            await query.message.delete()
        except TelegramBadRequest:
            logger.warning("Could not delete admin panel message.")
    await query.answer()

@admin_router.callback_query(F.data == "start_broadcast", AdminFilter())
async def handle_start_broadcast(query: CallbackQuery, state: FSMContext):
    if isinstance(query.message, Message):
        await state.set_state(BroadcastFSM.choosing_type)
        await query.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=create_broadcast_type_keyboard()
        )
    await query.answer()

@admin_router.callback_query(BroadcastFSM(), BroadcastCallbackFactory.filter(F.action == "cancel"))
async def handle_cancel_fsm(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if isinstance(query.message, Message):
        await query.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await query.answer()

@admin_router.callback_query(BroadcastFSM.choosing_type, BroadcastCallbackFactory.filter(F.action.in_({"send_now", "schedule"})))
async def handle_broadcast_type(query: CallbackQuery, state: FSMContext, callback_data: BroadcastCallbackFactory):
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
        return

    if callback_data.action == "send_now":
        await state.update_data(is_scheduled=False)
        await state.set_state(BroadcastFSM.getting_message)
        await query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–µ–≥–∞–π–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=create_cancel_fsm_keyboard()
        )
    elif callback_data.action == "schedule":
        await state.update_data(is_scheduled=True)
        await state.set_state(BroadcastFSM.getting_schedule_time)
        await query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ `–†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•` (UTC).\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `2024-09-01 08:30`",
            reply_markup=create_cancel_fsm_keyboard(),
            parse_mode="Markdown"
        )
    await query.answer()

@admin_router.message(BroadcastFSM.getting_schedule_time)
async def handle_get_schedule_time(message: Message, state: FSMContext):
    if not message.text:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —á–∞—Å —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return

    try:
        schedule_dt_naive = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        schedule_dt_utc = schedule_dt_naive.replace(tzinfo=timezone.utc)

        if schedule_dt_utc <= datetime.now(timezone.utc):
            await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤. –í–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—é –¥–∞—Ç—É —Ç–∞ —á–∞—Å.")
            return

        await state.update_data(schedule_time=schedule_dt_utc)
        await state.set_state(BroadcastFSM.getting_message)
        await message.answer(
            f"‚úÖ –ß–∞—Å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {schedule_dt_utc.strftime('%Y-%m-%d %H:%M %Z')}.\n\n"
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
            reply_markup=create_cancel_fsm_keyboard()
        )

    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ `–†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•`.")
    finally:
        try:
            await message.delete()
        except TelegramBadRequest:
            logger.warning("Could not delete user's time input message.")


async def show_confirmation_preview(bot: Bot, chat_id: int, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é."""
    data = await state.get_data()
    message_text = data.get("message_text", "–¢–µ–∫—Å—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    is_scheduled = data.get("is_scheduled", False)
    schedule_time: datetime | None = data.get("schedule_time")

    preview_text = "<b><u>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑—Å–∏–ª–∫–∏</u></b>\n\n"
    if is_scheduled and schedule_time:
        preview_text += f"üïí <b>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞:</b> {schedule_time.strftime('%Y-%m-%d %H:%M %Z')}\n\n"
    else:
        preview_text += "üöÄ <b>–¢–∏–ø –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</b> –ù–µ–≥–∞–π–Ω–æ\n\n"
    
    preview_text += "<b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await bot.send_message(chat_id, preview_text)
    await bot.send_message(
        chat_id,
        message_text,
        reply_markup=create_broadcast_confirmation_keyboard(is_scheduled=is_scheduled)
    )

@admin_router.message(BroadcastFSM.getting_message)
async def handle_get_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    if not message.text:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    await state.update_data(message_text=message.html_text)
    await state.set_state(BroadcastFSM.confirming_broadcast)
    await show_confirmation_preview(bot, message.chat.id, state)
    try:
        await message.delete()
    except TelegramBadRequest:
        logger.warning("Could not delete user's broadcast text message.")

@admin_router.callback_query(BroadcastFSM.confirming_broadcast, BroadcastCallbackFactory.filter())
async def handle_broadcast_confirmation(
    query: CallbackQuery, callback_data: BroadcastCallbackFactory, state: FSMContext,
    broadcast_service: BroadcastService, bot: Bot
):
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó.")
        return

    try:
        await query.message.delete()
        if query.message.reply_to_message:
            await bot.delete_message(query.message.chat.id, query.message.reply_to_message.message_id)
    except TelegramBadRequest:
        logger.warning("Could not delete preview messages.")

    if callback_data.action == "edit_text":
        await state.set_state(BroadcastFSM.getting_message)
        await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=create_cancel_fsm_keyboard())
    
    elif callback_data.action == "edit_time":
        await state.set_state(BroadcastFSM.getting_schedule_time)
        await query.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ `–†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•` (UTC):",
            reply_markup=create_cancel_fsm_keyboard(),
            parse_mode="Markdown"
        )

    elif callback_data.action == "send":
        data = await state.get_data()
        message_text = data.get("message_text")
        schedule_time_obj: datetime | None = data.get("schedule_time")
        
        schedule_time_iso = schedule_time_obj.isoformat() if schedule_time_obj else None
        
        if not message_text:
            await query.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        else:
            result_message = await broadcast_service.create_broadcast(message_text, schedule_time_iso)
            await query.message.answer(result_message)
        
        await state.clear()
        
    await query.answer()