import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery 

from application.services.subject import SubjectService
from bot.keyboards import create_subjects_keyboard, SubjectCallbackFactory, create_subject_details_keyboard

logger = logging.getLogger(__name__)
subject_router = Router(name="subject_router")


@subject_router.message(F.text == "üìö –ü—Ä–µ–¥–º–µ—Ç–∏")
async def handle_get_subjects_list(message: Message, subject_service: SubjectService):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    subjects = await subject_service.get_all_subjects()
    
    if not subjects:
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    keyboard = create_subjects_keyboard(subjects)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:", reply_markup=keyboard)

    try:
        await message.delete()
    except TelegramBadRequest as e:
        logger.warning("Could not delete user message: %s", e)


@subject_router.callback_query(SubjectCallbackFactory.filter(F.action == "select"))
async def handle_subject_selection(
    query: CallbackQuery,
    callback_data: SubjectCallbackFactory,
    subject_service: SubjectService
):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø—Ä–µ–¥–º–µ—Ç—É —Ç–∞ –ø–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ."""
    
    if callback_data.abbreviation is None or not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.", show_alert=True)
        return
        
    subject = await subject_service.get_grouped_subject_details(callback_data.abbreviation)

    if not subject:
        await query.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await query.answer()
        return

    response_text = subject_service.format_subject_details(subject)
    keyboard = create_subject_details_keyboard()
    
    await query.message.edit_text(response_text, reply_markup=keyboard)
    await query.answer()


@subject_router.callback_query(SubjectCallbackFactory.filter(F.action == "back"))
async def handle_back_to_subjects_list(
    query: CallbackQuery,
    subject_service: SubjectService
):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.", show_alert=True)
        return

    subjects = await subject_service.get_all_subjects()
    keyboard = create_subjects_keyboard(subjects)
    text = "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:"

    await query.message.edit_text(text=text, reply_markup=keyboard)
    await query.answer()


@subject_router.callback_query(SubjectCallbackFactory.filter(F.action == "close"))
async def handle_close_subjects_list(query: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä–∏—Ç–∏" —ñ –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    if not isinstance(query.message, Message):
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.", show_alert=True)
        return
    
    try:
        await query.message.delete()
    except TelegramBadRequest:
        await query.message.edit_reply_markup(reply_markup=None)
    finally:
        await query.answer()