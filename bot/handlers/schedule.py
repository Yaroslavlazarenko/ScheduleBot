import logging
from datetime import date, timedelta

from aiogram import F, Router, types, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import LinkPreviewOptions, Message, CallbackQuery

from application.services import ScheduleService
from bot.keyboards import create_schedule_navigation_keyboard, ScheduleCallbackFactory
from api.exceptions import ResourceNotFoundError

logger = logging.getLogger(__name__)
schedule_router = Router(name="schedule_router")

@schedule_router.message(F.text == "üóì –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")
async def handle_get_schedule(message: Message, schedule_service: ScheduleService):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å."""
    if not message.from_user:
        return
    
    today = date.today()
    await send_schedule_for_date(message, schedule_service, message.from_user.id, today)

@schedule_router.callback_query(ScheduleCallbackFactory.filter())
async def handle_schedule_navigation(
    query: CallbackQuery,
    callback_data: ScheduleCallbackFactory,
    schedule_service: ScheduleService,
    bot: Bot
):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ –¥–Ω—è—Ö —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–∞ —ñ–Ω–ª–∞–π–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""

    current_date = date.fromisoformat(callback_data.current_date)
    
    if callback_data.action == "next":
        target_date = current_date + timedelta(days=1)
    elif callback_data.action == "prev":
        target_date = current_date - timedelta(days=1)
    else:
        await query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
        return

    if isinstance(query.message, Message):
        await edit_schedule_for_date(
            query.message,
            schedule_service,
            callback_data.original_user_id,
            target_date
        )
    elif query.inline_message_id:
        await edit_inline_schedule_for_date(
            bot,
            query.inline_message_id,
            schedule_service,
            callback_data.original_user_id,
            target_date
        )
    else:
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", show_alert=True)
        logger.warning(
            "Attempted to navigate schedule on a message with no context (message is None and inline_message_id is None)"
        )

    await query.answer()


async def send_schedule_for_date(
    message: Message,
    schedule_service: ScheduleService,
    telegram_id: int,
    target_date: date
):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º."""
    try:
        schedule_dto = await schedule_service.get_schedule_for_day(telegram_id, target_date)
        response_text = schedule_service.format_schedule_message(schedule_dto)
        keyboard = create_schedule_navigation_keyboard(target_date, original_user_id=telegram_id)
        await message.answer(
            response_text, 
            reply_markup=keyboard,
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )
    except (ValueError, ResourceNotFoundError) as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /start.")
    except Exception:
        logger.exception("Failed to send schedule for date %s", target_date)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É.")


async def edit_schedule_for_date(
    message: types.Message,
    schedule_service: ScheduleService,
    telegram_id: int,
    target_date: date
):
    """–†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º."""
    if not isinstance(message, Message):
        return

    try:
        schedule_dto = await schedule_service.get_schedule_for_day(telegram_id, target_date)
        response_text = schedule_service.format_schedule_message(schedule_dto)
        keyboard = create_schedule_navigation_keyboard(target_date, original_user_id=telegram_id)
        await message.edit_text(
            response_text, 
            reply_markup=keyboard,
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )
    except TelegramBadRequest:
        pass
    except (ValueError, ResourceNotFoundError) as e:
        await message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /start.")
    except Exception:
        logger.exception("Failed to edit schedule for date %s", target_date)
        await message.edit_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É.")

async def edit_inline_schedule_for_date(
    bot: Bot,
    inline_message_id: str,
    schedule_service: ScheduleService,
    telegram_id: int,
    target_date: date
):
    """–†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ —ñ–Ω–ª–∞–π–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º."""
    try:
        schedule_dto = await schedule_service.get_schedule_for_day(telegram_id, target_date)
        response_text = schedule_service.format_schedule_message(schedule_dto)
        keyboard = create_schedule_navigation_keyboard(target_date, original_user_id=telegram_id)
        
        await bot.edit_message_text(
            text=response_text,
            inline_message_id=inline_message_id,
            reply_markup=keyboard,
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )
    except TelegramBadRequest:
        pass
    except (ValueError, ResourceNotFoundError) as e:
        logger.warning("Failed to edit inline schedule for user %d: %s", telegram_id, e)
    except Exception:
        logger.exception("Failed to edit inline schedule for date %s", target_date)