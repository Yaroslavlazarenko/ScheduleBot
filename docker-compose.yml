services:
  db:
    image: postgres:15
    container_name: schedule_db_container
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ${API_PROJECT_PATH}
    container_name: schedule_api_container
    restart: unless-stopped
    ports:
      - "${API_PORT}:80"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: "Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Authentication__ApiKey: ${API_KEY}
      AdminSettings__ApiKey: ${ADMIN_API_KEY}
      ASPNETCORE_URLS: "http://0.0.0.0:80"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  bot:
    build:
      context: .
    container_name: schedule_bot_container
    restart: always
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy

volumes:
  postgres_data: